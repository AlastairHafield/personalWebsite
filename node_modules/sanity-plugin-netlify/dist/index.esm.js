import { useClient as useClient$1, FormField, useColorScheme, definePlugin } from 'sanity';
import { route } from 'sanity/router';
import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { nanoid } from 'nanoid';
import { useState, useEffect } from 'react';
import { usePrefersDark, Flex, Badge, Box, Tooltip, Text, studioTheme, Spinner, Card, Label, Inline, Button, useToast, Stack, Heading, Code, MenuButton, Menu, MenuItem, Dialog, Grid, TextInput, Switch, ThemeProvider, ToastProvider, Container } from '@sanity/ui';
import axios from 'axios';
import spacetime from 'spacetime';
import useSWR from 'swr';
import { WarningOutlineIcon, EyeOpenIcon, EllipsisVerticalIcon, ClockIcon, EditIcon, TrashIcon } from '@sanity/icons';
const netlifyIcon = () => {
  return /* @__PURE__ */jsxs("svg", {
    width: "20px",
    height: "20px",
    viewBox: "0 0 24 24",
    role: "img",
    xmlns: "http://www.w3.org/2000/svg",
    children: [/* @__PURE__ */jsx("title", {
      children: "Netlify icon"
    }), /* @__PURE__ */jsx("path", {
      fill: "currentColor",
      d: "M16.934 8.519a1.044 1.044 0 0 1 .303.23l2.349-1.045-2.192-2.171-.491 2.954zM12.06 6.546a1.305 1.305 0 0 1 .209.574l3.497 1.482a1.044 1.044 0 0 1 .355-.177l.574-3.55-2.13-2.234-2.505 3.852v.053zm11.933 5.491l-3.748-3.748-2.548 1.044 6.264 2.662s.053.042.032.042zm-.627.606l-6.013-2.569a1.044 1.044 0 0 1-.7.407l-.647 3.957a1.044 1.044 0 0 1 .303.731l3.633.762 3.33-3.31v-.062zM15.4 9.25L12.132 7.86a1.2 1.2 0 0 1-1.044.543h-.199L8.185 12.58l7.225-3.132v.01a.887.887 0 0 1 0-.167.052.052 0 0 0-.01-.041zm3.967 7.308l-3.195-.658a1.096 1.096 0 0 1-.46.344l-.761 4.72 4.437-4.396s-.01.02-.021.02zm-4.469-.324a1.044 1.044 0 0 1-.616-.71l-5.95-1.222-.084.136 5.398 7.81.323-.324.919-5.67s.031.022.01.011zm-6.441-2.652l5.878 1.211a1.044 1.044 0 0 1 .824-.522l.637-3.894-.135-.115-7.308 3.132a1.817 1.817 0 0 1 .104.188zm-2.464.981l-.125-.125-2.537 1.044 1.232 1.222 1.399-2.172zm1.67.397a1.368 1.368 0 0 1-.563.125 1.389 1.389 0 0 1-.45-.073l-1.544 2.245 6.765 6.702 1.19-1.18zm-.95-2.641a1.702 1.702 0 0 1 .314 0 1.378 1.378 0 0 1 .344 0l2.735-4.25a1.19 1.19 0 0 1-.334-.824 1.242 1.242 0 0 1 0-.271l-3.32-1.535-2.672 2.6zm.303-7.402l3.237 1.378a1.242 1.242 0 0 1 .835-.282 1.357 1.357 0 0 1 .397.063l2.526-3.947L11.923.041 7.016 4.854s-.01.052 0 .063zm-1.21 8.164a1.566 1.566 0 0 1 .24-.334L3.278 8.613 0 11.797l5.804 1.284zm-.262.7L.533 12.735l2.203 2.235 2.777-1.18z"
    })]
  });
};
const DeployStatus = _ref => {
  let {
    status,
    errorMessage,
    justify
  } = _ref;
  var _a;
  const scheme = usePrefersDark() ? "dark" : "light";
  const getStatus = (status2, errorMessage2) => {
    if (errorMessage2 && errorMessage2.indexOf("Canceled build") >= 0) {
      return "canceled";
    } else if (errorMessage2 && errorMessage2.indexOf("Skipped") >= 0) {
      return "skipped";
    } else {
      return status2;
    }
  };
  const badgeStatus = (_a = getStatus(status, errorMessage)) == null ? void 0 : _a.toUpperCase();
  const badgeTone = {
    NEW: "default",
    LOADING: "default",
    ERROR: "critical",
    ENQUEUED: "default",
    CANCELED: "default",
    SKIPPED: "default",
    READY: "positive",
    BUILDING: "caution",
    PREPARING: "caution",
    PROCESSING: "caution"
  }[badgeStatus] || "default";
  const badgeMode = {
    LOADING: "outline",
    READY: "outline",
    SKIPPED: "outline",
    CANCELED: "outline"
  }[badgeStatus] || "default";
  return /* @__PURE__ */jsxs(Flex, {
    wrap: "nowrap",
    align: "center",
    justify,
    children: [/* @__PURE__ */jsx(Badge, {
      mode: badgeMode,
      tone: badgeTone,
      padding: 2,
      fontSize: 1,
      children: badgeStatus
    }), errorMessage && badgeStatus !== "CANCELED" && badgeStatus != "SKIPPED" && /* @__PURE__ */jsx(Box, {
      marginLeft: 2,
      children: /* @__PURE__ */jsx(Tooltip, {
        content: /* @__PURE__ */jsx(Box, {
          padding: 3,
          children: /* @__PURE__ */jsx(Text, {
            muted: true,
            size: 1,
            children: errorMessage
          })
        }),
        placement: "top",
        children: /* @__PURE__ */jsx(WarningOutlineIcon, {
          fontSize: 25,
          color: studioTheme.color[scheme].critical.spot.red,
          style: {
            marginLeft: "2px"
          }
        })
      })
    })]
  });
};
const DeployHistory = _ref2 => {
  let {
    siteId,
    accessToken,
    onlyShowProductionDeploys
  } = _ref2;
  const [deployments, setDeployments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  useEffect(() => {
    setLoading(true);
    const params = {};
    if (onlyShowProductionDeploys) params.production = true;
    axios.get("https://api.netlify.com/api/v1/sites/".concat(siteId, "/deploys"), {
      headers: {
        "content-type": "application/json",
        Authorization: "Bearer ".concat(accessToken)
      },
      params
    }).then(_ref3 => {
      let {
        data
      } = _ref3;
      setDeployments(data);
      setLoading(false);
      setError(false);
    }).catch(e => {
      setLoading(false);
      setError(true);
      console.warn(e);
    });
  }, [siteId, accessToken]);
  const formatDeployTime = totalSeconds => {
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return "".concat(minutes, "m ").concat(seconds, "s");
  };
  if (loading) {
    return /* @__PURE__ */jsxs(Flex, {
      direction: "column",
      align: "center",
      justify: "center",
      paddingTop: 3,
      children: [/* @__PURE__ */jsx(Spinner, {
        size: 4
      }), /* @__PURE__ */jsx(Box, {
        padding: 4,
        children: /* @__PURE__ */jsx(Text, {
          size: 2,
          children: "loading deployment history..."
        })
      })]
    });
  }
  if (error) {
    return /* @__PURE__ */jsx(Card, {
      padding: 4,
      radius: 2,
      shadow: 1,
      tone: "critical",
      children: /* @__PURE__ */jsxs(Text, {
        size: 2,
        align: "center",
        children: ["Could not load deployments for ", siteId]
      })
    });
  }
  return /* @__PURE__ */jsxs(Box, {
    as: "ul",
    padding: 0,
    children: [/* @__PURE__ */jsx(Card, {
      as: "li",
      padding: 4,
      borderBottom: true,
      children: /* @__PURE__ */jsxs(Flex, {
        children: [/* @__PURE__ */jsx(Box, {
          flex: 1,
          children: /* @__PURE__ */jsx(Label, {
            muted: true,
            children: "Branch"
          })
        }), /* @__PURE__ */jsx(Box, {
          flex: 1,
          children: /* @__PURE__ */jsx(Label, {
            muted: true,
            children: "State"
          })
        }), /* @__PURE__ */jsx(Box, {
          flex: 1,
          children: /* @__PURE__ */jsx(Label, {
            muted: true,
            children: "Commit"
          })
        }), /* @__PURE__ */jsx(Box, {
          flex: 1,
          children: /* @__PURE__ */jsx(Label, {
            muted: true,
            children: "Duration"
          })
        }), /* @__PURE__ */jsx(Box, {
          flex: 1,
          children: /* @__PURE__ */jsx(Label, {
            muted: true,
            children: "Deployed At"
          })
        }), /* @__PURE__ */jsx(Box, {
          flex: 1
        })]
      })
    }), deployments == null ? void 0 : deployments.map(deployment => {
      var _a, _b;
      return /* @__PURE__ */jsx(Card, {
        as: "li",
        padding: 4,
        borderBottom: true,
        children: /* @__PURE__ */jsxs(Flex, {
          align: "center",
          children: [/* @__PURE__ */jsx(Box, {
            flex: 1,
            children: /* @__PURE__ */jsx(Text, {
              children: /* @__PURE__ */jsx(Badge, {
                tone: "primary",
                paddingX: 3,
                paddingY: 2,
                radius: 6,
                fontSize: 0,
                children: deployment.branch
              })
            })
          }), /* @__PURE__ */jsx(Box, {
            flex: 1,
            children: /* @__PURE__ */jsx(Text, {
              children: /* @__PURE__ */jsx(DeployStatus, {
                status: deployment.state,
                errorMessage: deployment.error_message
              })
            })
          }), /* @__PURE__ */jsx(Box, {
            flex: 1,
            children: /* @__PURE__ */jsx(Text, {
              weight: "semibold",
              children: /* @__PURE__ */jsx(Box, {
                style: {
                  whiteSpace: "nowrap"
                },
                children: deployment.commit_url && /* @__PURE__ */jsx("a", {
                  href: deployment.commit_url,
                  target: "_blank",
                  rel: "noopener noreferrer",
                  children: (_a = deployment.commit_ref) == null ? void 0 : _a.substring(0, 7)
                }) || "\u2013"
              })
            })
          }), /* @__PURE__ */jsx(Box, {
            flex: 1,
            children: /* @__PURE__ */jsx(Inline, {
              space: 2,
              children: /* @__PURE__ */jsx(Text, {
                muted: true,
                children: deployment.deploy_time && formatDeployTime(deployment.deploy_time) || "\u2013"
              })
            })
          }), /* @__PURE__ */jsx(Box, {
            flex: 1,
            children: /* @__PURE__ */jsx(Inline, {
              space: 2,
              children: /* @__PURE__ */jsx(Text, {
                style: {
                  whiteSpace: "nowrap"
                },
                muted: true,
                children: spacetime.now().since(spacetime(deployment.created_at)).rounded
              })
            })
          }), /* @__PURE__ */jsxs(Flex, {
            flex: 1,
            justify: "flex-end",
            children: [/* @__PURE__ */jsx("a", {
              href: "".concat(deployment.admin_url, "/deploys/").concat(deployment.id),
              target: "_blank",
              children: /* @__PURE__ */jsx(Button, {
                icon: netlifyIcon(),
                mode: "bleed",
                tone: "primary",
                padding: 3
              })
            }), deployment.state == "ready" && /* @__PURE__ */jsx("a", {
              href: (_b = deployment.links) == null ? void 0 : _b.permalink,
              target: "_blank",
              children: /* @__PURE__ */jsx(Button, {
                icon: EyeOpenIcon,
                mode: "bleed",
                tone: "positive",
                padding: 3
              })
            })]
          })]
        })
      }, deployment.id);
    })]
  });
};
const useClient = () => {
  return useClient$1({
    apiVersion: "2022-09-14"
  });
};
const fetcher = (url, accessToken, params) => axios.get(url, {
  headers: {
    "content-type": "application/json",
    Authorization: "Bearer ".concat(accessToken)
  },
  params
}).then(res => res.data);
const initialDeploy$1 = {
  name: "",
  siteId: "",
  buildHook: "",
  branch: "",
  accessToken: "",
  onlyShowProductionDeploys: true,
  disableDeleteAction: false
};
const DeployItem = _ref4 => {
  let {
    _id,
    name,
    siteId,
    buildHook,
    branch,
    accessToken,
    onlyShowProductionDeploys,
    disableDeleteAction
  } = _ref4;
  var _a, _b;
  const client = useClient();
  const [isLoading, setIsLoading] = useState(true);
  const [isDeploying, setDeploying] = useState(false);
  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [pendingDeploy, setpendingDeploy] = useState(initialDeploy$1);
  const [errorMessage, setErrorMessage] = useState(null);
  const [status, setStatus] = useState("LOADING");
  const [timestamp, setTimestamp] = useState(null);
  const [buildTime, setBuildTime] = useState(null);
  const toast = useToast();
  const deploymentDataParam = {};
  if (onlyShowProductionDeploys) deploymentDataParam.production = true;
  const {
    data: deploymentData
  } = useSWR(() => ["https://api.netlify.com/api/v1/sites/".concat(siteId, "/deploys"), accessToken, deploymentDataParam], fetcher, {
    errorRetryCount: 3,
    refreshInterval: 1e3,
    onError: err => {
      var _a2, _b2, _c;
      setStatus("ERROR");
      setErrorMessage(((_c = (_b2 = (_a2 = err.response) == null ? void 0 : _a2.data) == null ? void 0 : _b2.error) == null ? void 0 : _c.message) || (err == null ? void 0 : err.message) || "Something went wrong!");
      setIsLoading(false);
    }
  });
  const onDeploy = (_name, _url) => {
    setStatus("ENQUEUED");
    setDeploying(true);
    setTimestamp(null);
    setBuildTime(null);
    const options = {};
    if (branch) options.trigger_branch = branch;
    axios.post(_url, options).then(() => {
      toast.push({
        status: "success",
        title: "Success!",
        description: "Triggered Deployment: ".concat(_name)
      });
    }).catch(err => {
      setDeploying(false);
      toast.push({
        status: "error",
        title: "Deploy Failed.",
        description: "".concat(err)
      });
    });
  };
  const onCancel = (id, token) => {
    setIsLoading(true);
    axios.post("https://api.netlify.com/api/v1/deploys/".concat(id, "/cancel"), null, {
      headers: {
        "content-type": "application/json",
        Authorization: "Bearer ".concat(accessToken)
      }
    }).then(res => res.data).then(res => {
      setStatus("CANCELED");
      setDeploying(false);
      setIsLoading(false);
      setBuildTime(null);
      setTimestamp(res.updated_at);
    });
  };
  const onRemove = (_name, id) => {
    setIsLoading(true);
    client.delete(id).then(() => {
      toast.push({
        status: "success",
        title: "Successfully deleted deployment: ".concat(_name)
      });
    });
  };
  const onEdit = () => {
    setpendingDeploy({
      name,
      siteId,
      buildHook,
      branch,
      accessToken: "",
      onlyShowProductionDeploys,
      disableDeleteAction
    });
    setIsFormOpen(true);
  };
  const onSubmitEdit = async () => {
    const update = {
      name: pendingDeploy.name,
      siteId: pendingDeploy.siteId,
      buildHook: pendingDeploy.buildHook,
      branch: pendingDeploy.branch,
      onlyShowProductionDeploys: pendingDeploy.onlyShowProductionDeploys,
      disableDeleteAction: pendingDeploy.disableDeleteAction
    };
    if (pendingDeploy.accessToken) {
      update.accessToken = pendingDeploy.accessToken;
    }
    client.patch(_id).set(update).commit().then(() => {
      toast.push({
        status: "success",
        title: "Success!",
        description: "Updated Deployment: ".concat(pendingDeploy.name)
      });
      setIsFormOpen(false);
      setIsSubmitting(false);
    });
  };
  useEffect(() => {
    var _a2;
    let isSubscribed = true;
    if (deploymentData && isSubscribed) {
      const latestDeployment = deploymentData[0];
      setStatus(((_a2 = latestDeployment == null ? void 0 : latestDeployment.state) == null ? void 0 : _a2.toUpperCase()) || "READY");
      if (latestDeployment == null ? void 0 : latestDeployment.created_at) setTimestamp(latestDeployment == null ? void 0 : latestDeployment.created_at);
      setIsLoading(false);
    }
    return () => {
      isSubscribed = false;
    };
  }, [deploymentData]);
  useEffect(() => {
    let isSubscribed = true;
    if (isSubscribed) {
      if (status === "READY" || status === "ERROR" || status === "CANCELED") {
        setDeploying(false);
      } else if (status === "BUILDING" || status === "ENQUEUED") {
        setDeploying(true);
      }
    }
    return () => {
      isSubscribed = false;
    };
  }, [status]);
  const tick = _timestamp => {
    if (_timestamp) {
      setBuildTime(spacetime.now().since(spacetime(_timestamp)).rounded);
    }
  };
  useEffect(() => {
    let isTicking = true;
    const timer = setInterval(() => {
      if (isTicking && isDeploying) {
        tick(timestamp);
      }
    }, 1e3);
    if (!isDeploying) {
      clearInterval(timer);
    }
    return () => {
      isTicking = false;
      clearInterval(timer);
    };
  }, [timestamp, isDeploying]);
  return /* @__PURE__ */jsxs(Fragment, {
    children: [/* @__PURE__ */jsxs(Flex, {
      wrap: "wrap",
      direction: ["column", "column", "row"],
      align: ["flex-end", "flex-end", "center"],
      children: [/* @__PURE__ */jsx(Box, {
        flex: [4, 1],
        paddingBottom: [4, 4, 1],
        children: /* @__PURE__ */jsxs(Stack, {
          space: 3,
          children: [/* @__PURE__ */jsxs(Inline, {
            space: 2,
            children: [/* @__PURE__ */jsx(Heading, {
              as: "h2",
              size: 1,
              children: /* @__PURE__ */jsx(Text, {
                weight: "semibold",
                children: name
              })
            }), /* @__PURE__ */jsx(Badge, {
              tone: "primary",
              paddingX: 3,
              paddingY: 2,
              radius: 6,
              fontSize: 0,
              children: deploymentData ? deploymentData[0].branch : "\u2013"
            })]
          }), /* @__PURE__ */jsx(Code, {
            size: 1,
            children: /* @__PURE__ */jsx(Box, {
              style: {
                whiteSpace: "nowrap",
                overflow: "hidden",
                textOverflow: "ellipsis"
              },
              children: siteId
            })
          })]
        })
      }), /* @__PURE__ */jsx(Flex, {
        wrap: "nowrap",
        align: "center",
        marginLeft: [0, 0, 4],
        flex: [1, "none"],
        children: /* @__PURE__ */jsxs(Inline, {
          space: 2,
          children: [/* @__PURE__ */jsx(Box, {
            marginRight: 2,
            children: /* @__PURE__ */jsxs(Stack, {
              space: 2,
              children: [/* @__PURE__ */jsx(DeployStatus, {
                status: (deploymentData == null ? void 0 : deploymentData.length) && ((_a = deploymentData[0]) == null ? void 0 : _a.state) || "LOADING",
                errorMessage: errorMessage || (deploymentData == null ? void 0 : deploymentData.length) && ((_b = deploymentData[0]) == null ? void 0 : _b.error_message),
                justify: "flex-end"
              }), /* @__PURE__ */jsx(Text, {
                align: "right",
                size: 1,
                muted: true,
                children: isDeploying ? buildTime || "--" : timestamp ? spacetime.now().since(spacetime(timestamp)).rounded : "--"
              })]
            })
          }), /* @__PURE__ */jsx(Button, {
            type: "button",
            tone: "positive",
            disabled: isDeploying || isLoading,
            loading: isDeploying || isLoading,
            onClick: () => onDeploy(name, buildHook),
            paddingX: [5],
            paddingY: [4],
            radius: 3,
            text: "Deploy"
          }), isDeploying && (status === "BUILDING" || status === "ENQUEUED" || status == "PREPARING" || status === "PROCESSING") && /* @__PURE__ */jsx(Button, {
            type: "button",
            tone: "critical",
            onClick: () => {
              onCancel(deploymentData[0].id);
            },
            paddingX: [5],
            paddingY: [4],
            radius: 3,
            text: "Cancel"
          }), /* @__PURE__ */jsx(MenuButton, {
            id: _id,
            button: /* @__PURE__ */jsx(Button, {
              mode: "bleed",
              icon: EllipsisVerticalIcon,
              disabled: isLoading
            }),
            popover: {
              portal: true,
              placement: "bottom-end"
            },
            menu: /* @__PURE__ */jsxs(Menu, {
              children: [/* @__PURE__ */jsx(MenuItem, {
                text: "History",
                icon: ClockIcon,
                onClick: () => setIsHistoryOpen(true),
                disabled: !(deploymentData == null ? void 0 : deploymentData.length)
              }), /* @__PURE__ */jsx(MenuItem, {
                text: "Edit",
                icon: EditIcon,
                tone: "primary",
                onClick: () => onEdit()
              }), !disableDeleteAction && /* @__PURE__ */jsx(MenuItem, {
                text: "Delete",
                icon: TrashIcon,
                tone: "critical",
                onClick: () => onRemove(name, _id)
              })]
            })
          })]
        })
      })]
    }), isFormOpen && /* @__PURE__ */jsx(Dialog, {
      header: "Edit Project Deployment",
      id: "update-webhook",
      width: 1,
      onClickOutside: () => setIsFormOpen(false),
      onClose: () => setIsFormOpen(false),
      footer: /* @__PURE__ */jsx(Box, {
        padding: 3,
        children: /* @__PURE__ */jsxs(Grid, {
          columns: 2,
          gap: 3,
          children: [/* @__PURE__ */jsx(Button, {
            padding: 4,
            mode: "ghost",
            text: "Cancel",
            onClick: () => setIsFormOpen(false)
          }), /* @__PURE__ */jsx(Button, {
            padding: 4,
            text: "Update",
            tone: "primary",
            loading: isSubmitting,
            onClick: () => onSubmitEdit(),
            disabled: isSubmitting || !pendingDeploy.name || !pendingDeploy.siteId || !pendingDeploy.buildHook
          })]
        })
      }),
      children: /* @__PURE__ */jsx(Box, {
        padding: 4,
        children: /* @__PURE__ */jsxs(Stack, {
          space: 4,
          children: [/* @__PURE__ */jsx(FormField, {
            title: "Site Name",
            description: "This should be the name of the site you're deploying.",
            children: /* @__PURE__ */jsx(TextInput, {
              type: "text",
              value: pendingDeploy.name,
              onChange: e => {
                e.persist();
                const name2 = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    name: name2
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsx(FormField, {
            title: "Site ID",
            description: 'Site Settings \u2192 General \u2192 Site details \u2192 "Site ID"',
            children: /* @__PURE__ */jsx(TextInput, {
              type: "text",
              value: pendingDeploy.siteId,
              onChange: e => {
                e.persist();
                const siteId2 = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    siteId: siteId2
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsx(FormField, {
            title: "Build Hook",
            description: "Site Settings \u2192 Build & deploy \u2192 Build hooks",
            children: /* @__PURE__ */jsx(TextInput, {
              type: "text",
              inputMode: "url",
              value: pendingDeploy.buildHook,
              onChange: e => {
                e.persist();
                const buildHook2 = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    buildHook: buildHook2
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsx(FormField, {
            title: "Branch",
            description: "Overrides the default branch for your Build Hook (optional)",
            children: /* @__PURE__ */jsx(TextInput, {
              type: "text",
              inputMode: "url",
              value: pendingDeploy.branch,
              onChange: e => {
                e.persist();
                const branch2 = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    branch: branch2
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsx(FormField, {
            title: "Access Token",
            description: /* @__PURE__ */jsxs(Fragment, {
              children: ["User dropdown \u2192 User settings \u2192 Applications \u2192\xA0", /* @__PURE__ */jsx("a", {
                href: "https://app.netlify.com/user/applications#personal-access-tokens",
                target: "_blank",
                children: "Personal access tokens"
              })]
            }),
            children: /* @__PURE__ */jsx(TextInput, {
              type: "text",
              value: pendingDeploy.accessToken,
              onChange: e => {
                e.persist();
                const accessToken2 = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    accessToken: accessToken2
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsx(FormField, {
            children: /* @__PURE__ */jsx(Card, {
              paddingY: 3,
              children: /* @__PURE__ */jsxs(Flex, {
                align: "center",
                children: [/* @__PURE__ */jsx(Switch, {
                  id: "onlyShowProductionDeploys",
                  style: {
                    display: "block"
                  },
                  onChange: e => {
                    e.persist();
                    const isChecked = e.target.checked;
                    setpendingDeploy(prevState => ({
                      ...prevState,
                      ...{
                        onlyShowProductionDeploys: isChecked
                      }
                    }));
                  },
                  checked: pendingDeploy.onlyShowProductionDeploys
                }), /* @__PURE__ */jsx(Box, {
                  flex: 1,
                  paddingLeft: 3,
                  children: /* @__PURE__ */jsx(Text, {
                    children: /* @__PURE__ */jsx("label", {
                      htmlFor: "onlyShowProductionDeploys",
                      children: "Only include Production deploys?"
                    })
                  })
                })]
              })
            })
          }), /* @__PURE__ */jsx(FormField, {
            children: /* @__PURE__ */jsx(Card, {
              paddingY: 3,
              children: /* @__PURE__ */jsxs(Flex, {
                align: "center",
                children: [/* @__PURE__ */jsx(Switch, {
                  id: "disableDeleteAction",
                  style: {
                    display: "block"
                  },
                  onChange: e => {
                    e.persist();
                    const isChecked = e.target.checked;
                    setpendingDeploy(prevState => ({
                      ...prevState,
                      ...{
                        disableDeleteAction: isChecked
                      }
                    }));
                  },
                  checked: pendingDeploy.disableDeleteAction
                }), /* @__PURE__ */jsx(Box, {
                  flex: 1,
                  paddingLeft: 3,
                  children: /* @__PURE__ */jsx(Text, {
                    children: /* @__PURE__ */jsx("label", {
                      htmlFor: "disableDeleteAction",
                      children: 'Disable the "Delete" action for this item in production?'
                    })
                  })
                })]
              })
            })
          })]
        })
      })
    }), isHistoryOpen && /* @__PURE__ */jsx(Dialog, {
      id: "deploy-history",
      header: "Deployment History: ".concat(name),
      onClickOutside: () => setIsHistoryOpen(false),
      onClose: () => setIsHistoryOpen(false),
      width: 2,
      children: /* @__PURE__ */jsx(DeployHistory, {
        siteId,
        accessToken,
        onlyShowProductionDeploys
      })
    })]
  });
};
const initialDeploy = {
  name: "",
  siteId: "",
  buildHook: "",
  branch: "",
  accessToken: "",
  onlyShowProductionDeploys: true,
  disableDeleteAction: false
};
const NetlifyDeploy = () => {
  const WEBHOOK_TYPE = "webhook_deploy";
  const WEBHOOK_QUERY = "*[_type == \"".concat(WEBHOOK_TYPE, "\"] | order(_createdAt)");
  const client = useClient();
  const {
    scheme
  } = useColorScheme();
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [deploys, setDeploys] = useState([]);
  const [pendingDeploy, setpendingDeploy] = useState(initialDeploy);
  const toast = useToast();
  const onSubmit = async () => {
    client.create({
      // Explicitly define an _id inside the netlify path to make sure it's not publicly accessible
      // This will protect users' tokens & project info. Read more: https://www.sanity.io/docs/ids
      _id: "netlify.".concat(nanoid()),
      _type: WEBHOOK_TYPE,
      name: pendingDeploy.name,
      siteId: pendingDeploy.siteId,
      buildHook: pendingDeploy.buildHook,
      branch: pendingDeploy.branch,
      accessToken: pendingDeploy.accessToken,
      onlyShowProductionDeploys: pendingDeploy.onlyShowProductionDeploys,
      disableDeleteAction: pendingDeploy.disableDeleteAction
    }).then(() => {
      toast.push({
        status: "success",
        title: "Success!",
        description: "Created Deployment: ".concat(pendingDeploy.name)
      });
      setIsFormOpen(false);
      setIsSubmitting(false);
      setpendingDeploy(initialDeploy);
    });
  };
  useEffect(() => {
    let webhookSubscription;
    client.fetch(WEBHOOK_QUERY).then(w => {
      setDeploys(w);
      setIsLoading(false);
      webhookSubscription = client.listen(WEBHOOK_QUERY, {}, {
        includeResult: true
      }).subscribe({
        next: res => {
          if (res.type === "mutation") {
            const wasCreated = res.mutations.some(item => Object.prototype.hasOwnProperty.call(item, "create"));
            const wasPatched = res.mutations.some(item => Object.prototype.hasOwnProperty.call(item, "patch"));
            const wasDeleted = res.mutations.some(item => Object.prototype.hasOwnProperty.call(item, "delete"));
            const filterDeploy = deploy => deploy._id !== res.documentId;
            const updateDeploy = deploy => deploy._id === res.documentId ? res.result : deploy;
            if (wasCreated) {
              setDeploys(prevState => {
                if (res.result) {
                  return [...prevState, res.result];
                }
                return prevState;
              });
            }
            if (wasPatched) {
              setDeploys(prevState => {
                const updatedDeploys = prevState.map(updateDeploy);
                return updatedDeploys;
              });
            }
            if (wasDeleted) {
              setDeploys(prevState => prevState.filter(filterDeploy));
            }
          }
        }
      });
    });
    return () => {
      if (webhookSubscription) {
        webhookSubscription.unsubscribe();
      }
    };
  }, [WEBHOOK_QUERY, client]);
  return /* @__PURE__ */jsx(ThemeProvider, {
    theme: studioTheme,
    children: /* @__PURE__ */jsxs(ToastProvider, {
      children: [/* @__PURE__ */jsx(Container, {
        display: "grid",
        width: 6,
        style: {
          minHeight: "100%"
        },
        children: /* @__PURE__ */jsxs(Flex, {
          direction: "column",
          children: [/* @__PURE__ */jsx(Card, {
            padding: 4,
            borderBottom: true,
            children: /* @__PURE__ */jsxs(Flex, {
              align: "center",
              children: [/* @__PURE__ */jsxs(Flex, {
                flex: 1,
                align: "center",
                children: [/* @__PURE__ */jsx(Card, {
                  children: netlifyIcon()
                }), /* @__PURE__ */jsx(Card, {
                  marginX: 1,
                  style: {
                    opacity: 0.15
                  },
                  children: /* @__PURE__ */jsx("svg", {
                    viewBox: "0 0 24 24",
                    width: "32",
                    height: "32",
                    stroke: "currentColor",
                    strokeWidth: "1",
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    fill: "none",
                    shapeRendering: "geometricPrecision",
                    children: /* @__PURE__ */jsx("path", {
                      d: "M16.88 3.549L7.12 20.451"
                    })
                  })
                }), /* @__PURE__ */jsx(Card, {
                  children: /* @__PURE__ */jsx(Text, {
                    as: "h1",
                    size: 2,
                    weight: "semibold",
                    children: "Netlify Deployments"
                  })
                })]
              }), /* @__PURE__ */jsx(Box, {
                children: /* @__PURE__ */jsx(Button, {
                  type: "button",
                  fontSize: 2,
                  tone: "primary",
                  padding: 3,
                  radius: 3,
                  text: "Add Project",
                  onClick: () => setIsFormOpen(true)
                })
              })]
            })
          }), /* @__PURE__ */jsx(Card, {
            flex: 1,
            children: /* @__PURE__ */jsx(Stack, {
              as: "ul",
              children: isLoading ? /* @__PURE__ */jsx(Card, {
                as: "li",
                padding: 4,
                children: /* @__PURE__ */jsxs(Flex, {
                  direction: "column",
                  align: "center",
                  justify: "center",
                  paddingTop: 3,
                  children: [/* @__PURE__ */jsx(Spinner, {
                    size: 4
                  }), /* @__PURE__ */jsx(Box, {
                    padding: 4,
                    children: /* @__PURE__ */jsx(Text, {
                      size: 2,
                      children: "loading your deployments..."
                    })
                  })]
                })
              }) : deploys.length ? deploys.map(deploy => /* @__PURE__ */jsx(Card, {
                as: "li",
                padding: 4,
                borderBottom: true,
                children: /* @__PURE__ */jsx(DeployItem, {
                  _id: deploy._id,
                  name: deploy.name,
                  siteId: deploy.siteId,
                  buildHook: deploy.buildHook,
                  branch: deploy.branch,
                  accessToken: deploy.accessToken,
                  onlyShowProductionDeploys: deploy.onlyShowProductionDeploys,
                  disableDeleteAction: deploy.disableDeleteAction
                }, deploy._id)
              }, deploy._id)) : /* @__PURE__ */jsx(Card, {
                as: "li",
                padding: 5,
                paddingTop: 6,
                children: /* @__PURE__ */jsxs(Flex, {
                  direction: "column",
                  align: "center",
                  justify: "center",
                  children: [/* @__PURE__ */jsxs("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    fill: "none",
                    width: "150",
                    viewBox: "0 0 260 235",
                    children: [/* @__PURE__ */jsx("path", {
                      fill: scheme === "dark" ? "transparent" : "white",
                      fillRule: "evenodd",
                      stroke: scheme === "dark" ? "white" : "black",
                      strokeDasharray: "4 4",
                      strokeWidth: "2",
                      d: "M107.36 2.48l105.7 185.47H2.66L108.35 2.48z",
                      clipRule: "evenodd"
                    }), /* @__PURE__ */jsx("ellipse", {
                      cx: "182.68",
                      cy: "156.48",
                      fill: "transparent",
                      rx: "74.32",
                      ry: "74.52"
                    }), /* @__PURE__ */jsx("path", {
                      stroke: scheme === "dark" ? "white" : "black",
                      strokeWidth: "2",
                      d: "M256.5 156.48c0 40.88-33.05 74.02-73.82 74.02-40.77 0-73.83-33.14-73.83-74.02 0-40.87 33.06-74.01 73.83-74.01 40.77 0 73.82 33.14 73.82 74.01z"
                    }), /* @__PURE__ */jsx("mask", {
                      id: "a",
                      width: "149",
                      height: "150",
                      x: "108",
                      y: "81",
                      maskUnits: "userSpaceOnUse",
                      children: /* @__PURE__ */jsx("ellipse", {
                        cx: "182.68",
                        cy: "156.48",
                        fill: "white",
                        rx: "74.32",
                        ry: "74.52"
                      })
                    }), /* @__PURE__ */jsx("g", {
                      mask: "url(#a)",
                      children: /* @__PURE__ */jsx("path", {
                        fill: scheme === "dark" ? "white" : "black",
                        fillRule: "evenodd",
                        d: "M108.36 2.48l105.7 185.47H2.66L108.35 2.48z",
                        clipRule: "evenodd"
                      })
                    })]
                  }), /* @__PURE__ */jsxs(Flex, {
                    direction: "column",
                    align: "center",
                    padding: 4,
                    children: [/* @__PURE__ */jsx(Text, {
                      size: 3,
                      children: "No deployments created yet."
                    }), /* @__PURE__ */jsx(Box, {
                      padding: 4,
                      children: /* @__PURE__ */jsx(Button, {
                        fontSize: 3,
                        paddingX: 5,
                        paddingY: 4,
                        tone: "primary",
                        radius: 4,
                        text: "Add Project",
                        onClick: () => setIsFormOpen(true)
                      })
                    }), /* @__PURE__ */jsx(Text, {
                      size: 1,
                      weight: "semibold",
                      muted: true,
                      children: /* @__PURE__ */jsx("a", {
                        href: "https://github.com/jclusso/sanity-plugin-netlify#-your-first-netlify-deployment",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        style: {
                          color: "inherit"
                        },
                        children: "Need help?"
                      })
                    })]
                  })]
                })
              })
            })
          })]
        })
      }), isFormOpen && /* @__PURE__ */jsx(Dialog, {
        header: "New Project Deployment",
        id: "create-webhook",
        width: 1,
        onClickOutside: () => setIsFormOpen(false),
        onClose: () => setIsFormOpen(false),
        footer: /* @__PURE__ */jsx(Box, {
          padding: 3,
          children: /* @__PURE__ */jsxs(Grid, {
            columns: 2,
            gap: 3,
            children: [/* @__PURE__ */jsx(Button, {
              padding: 4,
              mode: "ghost",
              text: "Cancel",
              onClick: () => setIsFormOpen(false)
            }), /* @__PURE__ */jsx(Button, {
              padding: 4,
              text: "Create",
              tone: "primary",
              loading: isSubmitting,
              onClick: () => onSubmit(),
              disabled: isSubmitting || !pendingDeploy.name || !pendingDeploy.siteId || !pendingDeploy.buildHook || !pendingDeploy.accessToken
            })]
          })
        }),
        children: /* @__PURE__ */jsx(Box, {
          padding: 4,
          children: /* @__PURE__ */jsxs(Stack, {
            space: 4,
            children: [/* @__PURE__ */jsx(FormField, {
              title: "Site Name",
              description: "This should be the name of the site you're deploying.",
              children: /* @__PURE__ */jsx(TextInput, {
                type: "text",
                value: pendingDeploy.name,
                onChange: e => {
                  e.persist();
                  const name = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      name
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsx(FormField, {
              title: "Site ID",
              description: 'Site Settings \u2192 General \u2192 Site details \u2192 "Site ID"',
              children: /* @__PURE__ */jsx(TextInput, {
                type: "text",
                value: pendingDeploy.siteId,
                onChange: e => {
                  e.persist();
                  const siteId = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      siteId
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsx(FormField, {
              title: "Build Hook",
              description: "Site Settings \u2192 Build & deploy \u2192 Build hooks",
              children: /* @__PURE__ */jsx(TextInput, {
                type: "text",
                inputMode: "url",
                value: pendingDeploy.buildHook,
                onChange: e => {
                  e.persist();
                  const buildHook = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      buildHook
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsx(FormField, {
              title: "Branch",
              description: "Overrides the default branch for your Build Hook (optional)",
              children: /* @__PURE__ */jsx(TextInput, {
                type: "text",
                inputMode: "url",
                value: pendingDeploy.branch,
                onChange: e => {
                  e.persist();
                  const branch = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      branch
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsx(FormField, {
              title: "Access Token",
              description: /* @__PURE__ */jsxs(Fragment, {
                children: ["User dropdown: User settings \u2192 Applications \u2192\xA0", /* @__PURE__ */jsx("a", {
                  href: "https://app.netlify.com/user/applications#personal-access-tokens",
                  target: "_blank",
                  children: "Personal access tokens"
                })]
              }),
              children: /* @__PURE__ */jsx(TextInput, {
                type: "text",
                value: pendingDeploy.accessToken,
                onChange: e => {
                  e.persist();
                  const accessToken = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      accessToken
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsx(FormField, {
              children: /* @__PURE__ */jsx(Card, {
                paddingY: 3,
                children: /* @__PURE__ */jsxs(Flex, {
                  align: "center",
                  children: [/* @__PURE__ */jsx(Switch, {
                    id: "onlyShowProductionDeploys",
                    style: {
                      display: "block"
                    },
                    onChange: e => {
                      e.persist();
                      const isChecked = e.target.checked;
                      setpendingDeploy(prevState => ({
                        ...prevState,
                        ...{
                          onlyShowProductionDeploys: isChecked
                        }
                      }));
                    },
                    checked: pendingDeploy.onlyShowProductionDeploys
                  }), /* @__PURE__ */jsx(Box, {
                    flex: 1,
                    paddingLeft: 3,
                    children: /* @__PURE__ */jsx(Text, {
                      children: /* @__PURE__ */jsx("label", {
                        htmlFor: "onlyShowProductionDeploys",
                        children: "Only include Production deploys?"
                      })
                    })
                  })]
                })
              })
            }), /* @__PURE__ */jsx(FormField, {
              children: /* @__PURE__ */jsx(Card, {
                paddingY: 3,
                children: /* @__PURE__ */jsxs(Flex, {
                  align: "center",
                  children: [/* @__PURE__ */jsx(Switch, {
                    id: "disableDeleteAction",
                    style: {
                      display: "block"
                    },
                    onChange: e => {
                      e.persist();
                      const isChecked = e.target.checked;
                      setpendingDeploy(prevState => ({
                        ...prevState,
                        ...{
                          disableDeleteAction: isChecked
                        }
                      }));
                    },
                    checked: pendingDeploy.disableDeleteAction
                  }), /* @__PURE__ */jsx(Box, {
                    flex: 1,
                    paddingLeft: 3,
                    children: /* @__PURE__ */jsx(Text, {
                      children: /* @__PURE__ */jsx("label", {
                        htmlFor: "disableDeleteAction",
                        children: 'Disable the "Delete" action for this item in production?'
                      })
                    })
                  })]
                })
              })
            })]
          })
        })
      })]
    })
  });
};
const netlifyTool = definePlugin(options => {
  const {
    name,
    title,
    icon,
    ...config
  } = options || {};
  return {
    name: "sanity-plugin-netlify",
    tools: [{
      name: name || "netlify",
      title: title || "Deploy",
      icon: icon || netlifyIcon,
      component: NetlifyDeploy,
      options: config,
      router: route.create("/*")
    }]
  };
});
export { netlifyTool };
//# sourceMappingURL=index.esm.js.map
